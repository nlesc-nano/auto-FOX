import sys
from typing import (
    Any,
    Mapping,
    NoReturn,
    TypeVar,
    Generic,
    overload,
    Tuple,
    ClassVar,
    Iterable,
    FrozenSet,
    Iterator,
    KeysView,
    ValuesView,
    ItemsView,
    Dict,
    Optional,
    Union,
    Type
)

T = TypeVar('T')
KT = TypeVar('KT', bound=str)
VT = TypeVar('VT')
ST = TypeVar('ST', bound=TypedMapping)


class TypedMapping(Mapping[KT, VT], Generic[KT, VT]):
    __slots__: Tuple[str, ...] = ...
    KEYS: ClassVar[FrozenSet[KT]] = ...

    @overload
    def __init__(self, **kwargs: VT) -> None: ...
    @overload
    def __init__(self, map: Mapping[KT, VT], **kwargs: VT) -> None: ...
    @overload
    def __init__(self, iterable: Iterable[Tuple[KT, VT]], **kwargs: VT) -> None: ...
    def __getattr__(self, name: str) -> VT: ...
    def __reduce__(self: ST) -> Tuple[Type[ST], Tuple[Dict[KT, VT]]]: ...

    def copy(self: ST) -> ST: ...
    def __copy__(self: ST) -> ST: ...
    def __deepcopy__(self: ST, memo: Optional[Dict[int, ST]] = ...) -> ST: ...

    def __eq__(self, value: object) -> bool: ...
    def __bool__(self) -> bool: ...
    def __getitem__(self, key: KT) -> VT: ...
    def __iter__(self) -> Iterator[KT]: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: object) -> bool: ...
    @overload
    def get(self, key: KT) -> Optional[VT]: ...
    @overload
    def get(self, key: KT, default: T) -> Union[VT, T]: ...
    def keys(self) -> KeysView[KT]: ...
    def items(self) -> ItemsView[KT, VT]: ...
    def values(self) -> ValuesView[VT]: ...
    if sys.version_info >= (3, 8):
        def __reversed__(self) -> Iterator[KT]: ...
    if sys.version_info >= (3, 9):
        def __or__(self, value: Dict[KT, VT]) -> Dict[KT, VT]: ...
